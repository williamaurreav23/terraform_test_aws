# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import miniforum_pb2 as miniforum__pb2


class MiniforumServiceStub(object):
    """The forum service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddMessage = channel.unary_unary(
                '/miniforum.MiniforumService/AddMessage',
                request_serializer=miniforum__pb2.Message.SerializeToString,
                response_deserializer=miniforum__pb2.AddMessageResponse.FromString,
                )
        self.ListMessages = channel.unary_unary(
                '/miniforum.MiniforumService/ListMessages',
                request_serializer=miniforum__pb2.ListMessagesRequest.SerializeToString,
                response_deserializer=miniforum__pb2.ListMessagesResponse.FromString,
                )
        self.ListMessagesByUser = channel.unary_unary(
                '/miniforum.MiniforumService/ListMessagesByUser',
                request_serializer=miniforum__pb2.ListMessagesByUserRequest.SerializeToString,
                response_deserializer=miniforum__pb2.ListMessagesResponse.FromString,
                )
        self.AddMessageToUser = channel.unary_unary(
                '/miniforum.MiniforumService/AddMessageToUser',
                request_serializer=miniforum__pb2.MessageToUser.SerializeToString,
                response_deserializer=miniforum__pb2.AddMessageResponse.FromString,
                )
        self.RegisterUser = channel.unary_unary(
                '/miniforum.MiniforumService/RegisterUser',
                request_serializer=miniforum__pb2.RegisterUserRequest.SerializeToString,
                response_deserializer=miniforum__pb2.RegisterUserResponse.FromString,
                )
        self.LoginUser = channel.unary_unary(
                '/miniforum.MiniforumService/LoginUser',
                request_serializer=miniforum__pb2.LoginUserRequest.SerializeToString,
                response_deserializer=miniforum__pb2.LoginUserResponse.FromString,
                )
        self.NotifyUserNewMessages = channel.unary_unary(
                '/miniforum.MiniforumService/NotifyUserNewMessages',
                request_serializer=miniforum__pb2.NotifyUserNewMessagesRequest.SerializeToString,
                response_deserializer=miniforum__pb2.NotifyUserNewMessagesResponse.FromString,
                )


class MiniforumServiceServicer(object):
    """The forum service definition.
    """

    def AddMessage(self, request, context):
        """Existing methods
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListMessagesByUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddMessageToUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterUser(self, request, context):
        """New methods for user management and notifications
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoginUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyUserNewMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MiniforumServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.AddMessage,
                    request_deserializer=miniforum__pb2.Message.FromString,
                    response_serializer=miniforum__pb2.AddMessageResponse.SerializeToString,
            ),
            'ListMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.ListMessages,
                    request_deserializer=miniforum__pb2.ListMessagesRequest.FromString,
                    response_serializer=miniforum__pb2.ListMessagesResponse.SerializeToString,
            ),
            'ListMessagesByUser': grpc.unary_unary_rpc_method_handler(
                    servicer.ListMessagesByUser,
                    request_deserializer=miniforum__pb2.ListMessagesByUserRequest.FromString,
                    response_serializer=miniforum__pb2.ListMessagesResponse.SerializeToString,
            ),
            'AddMessageToUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AddMessageToUser,
                    request_deserializer=miniforum__pb2.MessageToUser.FromString,
                    response_serializer=miniforum__pb2.AddMessageResponse.SerializeToString,
            ),
            'RegisterUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterUser,
                    request_deserializer=miniforum__pb2.RegisterUserRequest.FromString,
                    response_serializer=miniforum__pb2.RegisterUserResponse.SerializeToString,
            ),
            'LoginUser': grpc.unary_unary_rpc_method_handler(
                    servicer.LoginUser,
                    request_deserializer=miniforum__pb2.LoginUserRequest.FromString,
                    response_serializer=miniforum__pb2.LoginUserResponse.SerializeToString,
            ),
            'NotifyUserNewMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyUserNewMessages,
                    request_deserializer=miniforum__pb2.NotifyUserNewMessagesRequest.FromString,
                    response_serializer=miniforum__pb2.NotifyUserNewMessagesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'miniforum.MiniforumService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MiniforumService(object):
    """The forum service definition.
    """

    @staticmethod
    def AddMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/miniforum.MiniforumService/AddMessage',
            miniforum__pb2.Message.SerializeToString,
            miniforum__pb2.AddMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/miniforum.MiniforumService/ListMessages',
            miniforum__pb2.ListMessagesRequest.SerializeToString,
            miniforum__pb2.ListMessagesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListMessagesByUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/miniforum.MiniforumService/ListMessagesByUser',
            miniforum__pb2.ListMessagesByUserRequest.SerializeToString,
            miniforum__pb2.ListMessagesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddMessageToUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/miniforum.MiniforumService/AddMessageToUser',
            miniforum__pb2.MessageToUser.SerializeToString,
            miniforum__pb2.AddMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/miniforum.MiniforumService/RegisterUser',
            miniforum__pb2.RegisterUserRequest.SerializeToString,
            miniforum__pb2.RegisterUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoginUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/miniforum.MiniforumService/LoginUser',
            miniforum__pb2.LoginUserRequest.SerializeToString,
            miniforum__pb2.LoginUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NotifyUserNewMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/miniforum.MiniforumService/NotifyUserNewMessages',
            miniforum__pb2.NotifyUserNewMessagesRequest.SerializeToString,
            miniforum__pb2.NotifyUserNewMessagesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
